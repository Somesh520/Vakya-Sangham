diff --git a/node_modules/react-native-document-picker/android/build/generated/source/buildConfig/debug/com/reactnativedocumentpicker/BuildConfig.java b/node_modules/react-native-document-picker/android/build/generated/source/buildConfig/debug/com/reactnativedocumentpicker/BuildConfig.java
new file mode 100644
index 0000000..e496ff4
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/generated/source/buildConfig/debug/com/reactnativedocumentpicker/BuildConfig.java
@@ -0,0 +1,12 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.reactnativedocumentpicker;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String LIBRARY_PACKAGE_NAME = "com.reactnativedocumentpicker";
+  public static final String BUILD_TYPE = "debug";
+  // Field from default config.
+  public static final boolean IS_NEW_ARCHITECTURE_ENABLED = false;
+}
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml b/node_modules/react-native-document-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml
new file mode 100644
index 0000000..69460bb
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.reactnativedocumentpicker" >
+
+    <uses-sdk android:minSdkVersion="24" />
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output-metadata.json b/node_modules/react-native-document-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output-metadata.json
new file mode 100644
index 0000000..01d52e3
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output-metadata.json
@@ -0,0 +1,18 @@
+{
+  "version": 3,
+  "artifactType": {
+    "type": "AAPT_FRIENDLY_MERGED_MANIFESTS",
+    "kind": "Directory"
+  },
+  "applicationId": "com.reactnativedocumentpicker",
+  "variantName": "debug",
+  "elements": [
+    {
+      "type": "SINGLE",
+      "filters": [],
+      "attributes": [],
+      "outputFile": "AndroidManifest.xml"
+    }
+  ],
+  "elementType": "File"
+}
\ No newline at end of file
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties b/node_modules/react-native-document-picker/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties
new file mode 100644
index 0000000..1211b1e
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/aar_metadata/debug/writeDebugAarMetadata/aar-metadata.properties
@@ -0,0 +1,6 @@
+aarFormatVersion=1.0
+aarMetadataVersion=1.0
+minCompileSdk=1
+minCompileSdkExtension=0
+minAndroidGradlePluginVersion=1.0.0
+coreLibraryDesugaringEnabled=false
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/annotation_processor_list/debug/javaPreCompileDebug/annotationProcessors.json b/node_modules/react-native-document-picker/android/build/intermediates/annotation_processor_list/debug/javaPreCompileDebug/annotationProcessors.json
new file mode 100644
index 0000000..9e26dfe
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/annotation_processor_list/debug/javaPreCompileDebug/annotationProcessors.json
@@ -0,0 +1 @@
+{}
\ No newline at end of file
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar b/node_modules/react-native-document-picker/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar
new file mode 100644
index 0000000..b442b9b
Binary files /dev/null and b/node_modules/react-native-document-picker/android/build/intermediates/compile_r_class_jar/debug/generateDebugRFile/R.jar differ
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/compile_symbol_list/debug/generateDebugRFile/R.txt b/node_modules/react-native-document-picker/android/build/intermediates/compile_symbol_list/debug/generateDebugRFile/R.txt
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties b/node_modules/react-native-document-picker/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
new file mode 100644
index 0000000..7264985
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
@@ -0,0 +1 @@
+#Sat Aug 02 12:09:49 IST 2025
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml b/node_modules/react-native-document-picker/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
new file mode 100644
index 0000000..88fab60
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main" generated-set="main$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\project\Frontend\node_modules\react-native-document-picker\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug" generated-set="debug$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\project\Frontend\node_modules\react-native-document-picker\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\project\Frontend\node_modules\react-native-document-picker\android\build\generated\res\resValues\debug"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated" generated-set="generated$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\project\Frontend\node_modules\react-native-document-picker\android\build\generated\res\resValues\debug"/></dataSet><mergedItems/></merger>
\ No newline at end of file
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt b/node_modules/react-native-document-picker/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt
new file mode 100644
index 0000000..78ac5b8
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/local_only_symbol_list/debug/parseDebugLocalResources/R-def.txt
@@ -0,0 +1,2 @@
+R_DEF: Internal format may change without notice
+local
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/manifest_merge_blame_file/debug/processDebugManifest/manifest-merger-blame-debug-report.txt b/node_modules/react-native-document-picker/android/build/intermediates/manifest_merge_blame_file/debug/processDebugManifest/manifest-merger-blame-debug-report.txt
new file mode 100644
index 0000000..41b43b9
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/manifest_merge_blame_file/debug/processDebugManifest/manifest-merger-blame-debug-report.txt
@@ -0,0 +1,7 @@
+1<?xml version="1.0" encoding="utf-8"?>
+2<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+3    package="com.reactnativedocumentpicker" >
+4
+5    <uses-sdk android:minSdkVersion="24" />
+6
+7</manifest>
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/merged_manifest/debug/processDebugManifest/AndroidManifest.xml b/node_modules/react-native-document-picker/android/build/intermediates/merged_manifest/debug/processDebugManifest/AndroidManifest.xml
new file mode 100644
index 0000000..69460bb
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/merged_manifest/debug/processDebugManifest/AndroidManifest.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.reactnativedocumentpicker" >
+
+    <uses-sdk android:minSdkVersion="24" />
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json b/node_modules/react-native-document-picker/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json
new file mode 100644
index 0000000..0637a08
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/navigation_json/debug/extractDeepLinksDebug/navigation.json
@@ -0,0 +1 @@
+[]
\ No newline at end of file
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt b/node_modules/react-native-document-picker/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt
new file mode 100644
index 0000000..08f4ebe
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/nested_resources_validation_report/debug/generateDebugResources/nestedResourcesValidationReport.txt
@@ -0,0 +1 @@
+0 Warning/Error
\ No newline at end of file
diff --git a/node_modules/react-native-document-picker/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt b/node_modules/react-native-document-picker/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt
new file mode 100644
index 0000000..df6e602
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/intermediates/symbol_list_with_package_name/debug/generateDebugRFile/package-aware-r.txt
@@ -0,0 +1 @@
+com.reactnativedocumentpicker
diff --git a/node_modules/react-native-document-picker/android/build/outputs/logs/manifest-merger-debug-report.txt b/node_modules/react-native-document-picker/android/build/outputs/logs/manifest-merger-debug-report.txt
new file mode 100644
index 0000000..4b517a6
--- /dev/null
+++ b/node_modules/react-native-document-picker/android/build/outputs/logs/manifest-merger-debug-report.txt
@@ -0,0 +1,17 @@
+-- Merging decision tree log ---
+manifest
+ADDED from C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\AndroidManifest.xml:1:1-4:12
+INJECTED from C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\AndroidManifest.xml:1:1-4:12
+	package
+		ADDED from C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\AndroidManifest.xml:2:11-50
+		INJECTED from C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\AndroidManifest.xml
+	xmlns:android
+		ADDED from C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\AndroidManifest.xml:1:11-69
+uses-sdk
+INJECTED from C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\AndroidManifest.xml reason: use-sdk injection requested
+INJECTED from C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\AndroidManifest.xml
+INJECTED from C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\AndroidManifest.xml
+	android:targetSdkVersion
+		INJECTED from C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\AndroidManifest.xml
+	android:minSdkVersion
+		INJECTED from C:\project\Frontend\node_modules\react-native-document-picker\android\src\main\AndroidManifest.xml
diff --git a/node_modules/react-native-document-picker/android/src/main/java/com/reactnativedocumentpicker/RNDocumentPickerModule.java b/node_modules/react-native-document-picker/android/src/main/java/com/reactnativedocumentpicker/RNDocumentPickerModule.java
index 5001525..42e69ff 100644
--- a/node_modules/react-native-document-picker/android/src/main/java/com/reactnativedocumentpicker/RNDocumentPickerModule.java
+++ b/node_modules/react-native-document-picker/android/src/main/java/com/reactnativedocumentpicker/RNDocumentPickerModule.java
@@ -18,10 +18,8 @@ import androidx.annotation.NonNull;
 import com.facebook.react.bridge.ActivityEventListener;
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.BaseActivityEventListener;
-import com.facebook.react.bridge.GuardedResultAsyncTask;
 import com.facebook.react.bridge.Promise;
 import com.facebook.react.bridge.ReactApplicationContext;
-import com.facebook.react.bridge.ReactContext;
 import com.facebook.react.bridge.ReactMethod;
 import com.facebook.react.bridge.ReadableArray;
 import com.facebook.react.bridge.ReadableMap;
@@ -32,330 +30,283 @@ import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
 
 public class RNDocumentPickerModule extends NativeDocumentPickerSpec {
-  public static final String NAME = "RNDocumentPicker";
-  private static final int READ_REQUEST_CODE = 41;
-  private static final int PICK_DIR_REQUEST_CODE = 42;
-
-  private static final String E_ACTIVITY_DOES_NOT_EXIST = "ACTIVITY_DOES_NOT_EXIST";
-  private static final String E_FAILED_TO_SHOW_PICKER = "FAILED_TO_SHOW_PICKER";
-  private static final String E_DOCUMENT_PICKER_CANCELED = "DOCUMENT_PICKER_CANCELED";
-  private static final String E_UNABLE_TO_OPEN_FILE_TYPE = "UNABLE_TO_OPEN_FILE_TYPE";
-  private static final String E_UNKNOWN_ACTIVITY_RESULT = "UNKNOWN_ACTIVITY_RESULT";
-  private static final String E_INVALID_DATA_RETURNED = "INVALID_DATA_RETURNED";
-  private static final String E_UNEXPECTED_EXCEPTION = "UNEXPECTED_EXCEPTION";
-
-  private static final String OPTION_TYPE = "type";
-  private static final String OPTION_MULTIPLE = "allowMultiSelection";
-  private static final String OPTION_COPY_TO = "copyTo";
-
-  private static final String FIELD_URI = "uri";
-  private static final String FIELD_FILE_COPY_URI = "fileCopyUri";
-  private static final String FIELD_COPY_ERROR = "copyError";
-  private static final String FIELD_NAME = "name";
-  private static final String FIELD_TYPE = "type";
-  private static final String FIELD_SIZE = "size";
-
-  private Promise promise;
-  private String copyTo;
-
-  public RNDocumentPickerModule(ReactApplicationContext reactContext) {
-    super(reactContext);
-    reactContext.addActivityEventListener(activityEventListener);
-  }
-
-  private final ActivityEventListener activityEventListener = new BaseActivityEventListener() {
-    @Override
-    public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {
-      boolean isForeignResult = requestCode != READ_REQUEST_CODE && requestCode != PICK_DIR_REQUEST_CODE;
-      if (isForeignResult) {
-        return;
-      }
-      final Promise storedPromise = promise;
-      if (storedPromise == null) {
-        Log.e(NAME, "promise was null in onActivityResult");
-        return;
-      }
-      if (resultCode == Activity.RESULT_CANCELED) {
-        sendError(E_DOCUMENT_PICKER_CANCELED, "User canceled directory picker");
-        return;
-      }
-      if (requestCode == READ_REQUEST_CODE) {
-        onShowActivityResult(resultCode, data, storedPromise);
-      } else {
-        onPickDirectoryResult(resultCode, data);
-      }
-    }
-  };
-
-  private String[] readableArrayToStringArray(ReadableArray readableArray) {
-    int size = readableArray.size();
-    String[] array = new String[size];
-    for (int i = 0; i < size; ++i) {
-      array[i] = readableArray.getString(i);
-    }
-    return array;
-  }
-
-  @Override
-  public void invalidate() {
-    getReactApplicationContext().removeActivityEventListener(activityEventListener);
-    super.invalidate();
-  }
-
-  @NonNull
-  @Override
-  public String getName() {
-    return NAME;
-  }
-
-  @ReactMethod
-  public void pick(ReadableMap args, Promise promise) {
-    Activity currentActivity = getCurrentActivity();
-    this.promise = promise;
-    this.copyTo = args.hasKey(OPTION_COPY_TO) ? args.getString(OPTION_COPY_TO) : null;
-
-    if (currentActivity == null) {
-      sendError(E_ACTIVITY_DOES_NOT_EXIST, "Current activity does not exist");
-      return;
+    public static final String NAME = "RNDocumentPicker";
+    private static final int READ_REQUEST_CODE = 41;
+    private static final int PICK_DIR_REQUEST_CODE = 42;
+
+    private static final String E_ACTIVITY_DOES_NOT_EXIST = "ACTIVITY_DOES_NOT_EXIST";
+    private static final String E_FAILED_TO_SHOW_PICKER = "FAILED_TO_SHOW_PICKER";
+    private static final String E_DOCUMENT_PICKER_CANCELED = "DOCUMENT_PICKER_CANCELED";
+    private static final String E_UNABLE_TO_OPEN_FILE_TYPE = "UNABLE_TO_OPEN_FILE_TYPE";
+    private static final String E_UNKNOWN_ACTIVITY_RESULT = "UNKNOWN_ACTIVITY_RESULT";
+    private static final String E_INVALID_DATA_RETURNED = "INVALID_DATA_RETURNED";
+    private static final String E_UNEXPECTED_EXCEPTION = "UNEXPECTED_EXCEPTION";
+
+    private static final String OPTION_TYPE = "type";
+    private static final String OPTION_MULTIPLE = "allowMultiSelection";
+    private static final String OPTION_COPY_TO = "copyTo";
+
+    private static final String FIELD_URI = "uri";
+    private static final String FIELD_FILE_COPY_URI = "fileCopyUri";
+    private static final String FIELD_COPY_ERROR = "copyError";
+    private static final String FIELD_NAME = "name";
+    private static final String FIELD_TYPE = "type";
+    private static final String FIELD_SIZE = "size";
+
+    private Promise promise;
+    private String copyTo;
+
+    public RNDocumentPickerModule(ReactApplicationContext reactContext) {
+        super(reactContext);
+        reactContext.addActivityEventListener(activityEventListener);
     }
 
-    try {
-      Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
-      intent.addCategory(Intent.CATEGORY_OPENABLE);
-
-      intent.setType("*/*");
-      if (!args.isNull(OPTION_TYPE)) {
-        ReadableArray types = args.getArray(OPTION_TYPE);
-        if (types != null) {
-          if (types.size() > 1) {
-            String[] mimeTypes = readableArrayToStringArray(types);
-            intent.putExtra(Intent.EXTRA_MIME_TYPES, mimeTypes);
-            intent.setType(String.join("|",mimeTypes));
-          } else if (types.size() == 1) {
-            intent.setType(types.getString(0));
-          }
+    private final ActivityEventListener activityEventListener = new BaseActivityEventListener() {
+        @Override
+        public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {
+            if (requestCode != READ_REQUEST_CODE && requestCode != PICK_DIR_REQUEST_CODE) {
+                return;
+            }
+
+            final Promise storedPromise = promise;
+            if (storedPromise == null) {
+                Log.e(NAME, "promise was null in onActivityResult");
+                return;
+            }
+
+            if (resultCode == Activity.RESULT_CANCELED) {
+                sendError(E_DOCUMENT_PICKER_CANCELED, "User canceled document picker");
+                return;
+            }
+
+            if (requestCode == READ_REQUEST_CODE) {
+                onShowActivityResult(resultCode, data, storedPromise);
+            } else {
+                onPickDirectoryResult(resultCode, data);
+            }
         }
-      }
+    };
 
-      boolean multiple = !args.isNull(OPTION_MULTIPLE) && args.getBoolean(OPTION_MULTIPLE);
-      intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, multiple);
-
-      currentActivity.startActivityForResult(intent, READ_REQUEST_CODE, Bundle.EMPTY);
-    } catch (ActivityNotFoundException e) {
-      sendError(E_UNABLE_TO_OPEN_FILE_TYPE, e.getLocalizedMessage());
-    } catch (Exception e) {
-      e.printStackTrace();
-      sendError(E_FAILED_TO_SHOW_PICKER, e.getLocalizedMessage());
+    private String[] readableArrayToStringArray(ReadableArray readableArray) {
+        int size = readableArray.size();
+        String[] array = new String[size];
+        for (int i = 0; i < size; ++i) {
+            array[i] = readableArray.getString(i);
+        }
+        return array;
     }
-  }
 
-  @ReactMethod
-  public void pickDirectory(Promise promise) {
-    Activity currentActivity = getCurrentActivity();
-
-    if (currentActivity == null) {
-      promise.reject(E_ACTIVITY_DOES_NOT_EXIST, "Current activity does not exist");
-      return;
+    @Override
+    public void invalidate() {
+        getReactApplicationContext().removeActivityEventListener(activityEventListener);
+        super.invalidate();
     }
-    this.promise = promise;
-    try {
-      Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);
-      currentActivity.startActivityForResult(intent, PICK_DIR_REQUEST_CODE, null);
-    } catch (Exception e) {
-      sendError(E_FAILED_TO_SHOW_PICKER, "Failed to create directory picker", e);
+
+    @NonNull
+    @Override
+    public String getName() {
+        return NAME;
     }
-  }
 
-  @Override
-  public void releaseSecureAccess(ReadableArray uris, Promise promise) {
-    promise.reject("RNDocumentPicker:releaseSecureAccess", "releaseSecureAccess is not supported on Android");
-  }
+    @ReactMethod
+    public void pick(ReadableMap args, Promise promise) {
+        Activity currentActivity = getCurrentActivity();
+        this.promise = promise;
+        this.copyTo = args.hasKey(OPTION_COPY_TO) ? args.getString(OPTION_COPY_TO) : null;
 
-  private void onPickDirectoryResult(int resultCode, Intent data) {
-    if (resultCode != Activity.RESULT_OK) {
-      sendError(E_UNKNOWN_ACTIVITY_RESULT, "Unknown activity result: " + resultCode);
-      return;
-    }
+        if (currentActivity == null) {
+            sendError(E_ACTIVITY_DOES_NOT_EXIST, "Current activity does not exist");
+            return;
+        }
 
-    if (data == null || data.getData() == null) {
-      sendError(E_INVALID_DATA_RETURNED, "Invalid data returned by intent");
-      return;
+        try {
+            Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
+            intent.addCategory(Intent.CATEGORY_OPENABLE);
+            intent.setType("*/*");
+
+            if (args.hasKey(OPTION_TYPE)) {
+                ReadableArray types = args.getArray(OPTION_TYPE);
+                if (types != null && types.size() > 0) {
+                    if (types.size() > 1) {
+                        String[] mimeTypes = readableArrayToStringArray(types);
+                        intent.putExtra(Intent.EXTRA_MIME_TYPES, mimeTypes);
+                    } else {
+                        intent.setType(types.getString(0));
+                    }
+                }
+            }
+
+            if (args.hasKey(OPTION_MULTIPLE)) {
+                intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, args.getBoolean(OPTION_MULTIPLE));
+            }
+
+            currentActivity.startActivityForResult(intent, READ_REQUEST_CODE, Bundle.EMPTY);
+        } catch (ActivityNotFoundException e) {
+            sendError(E_UNABLE_TO_OPEN_FILE_TYPE, e.getLocalizedMessage());
+        } catch (Exception e) {
+            e.printStackTrace();
+            sendError(E_FAILED_TO_SHOW_PICKER, e.getLocalizedMessage());
+        }
     }
-    Uri uri = data.getData();
-
-    WritableMap map = Arguments.createMap();
-    map.putString(FIELD_URI, uri.toString());
-    promise.resolve(map);
-  }
 
-  public void onShowActivityResult(int resultCode, Intent data, Promise promise) {
-    if (resultCode != Activity.RESULT_OK) {
-      sendError(E_UNKNOWN_ACTIVITY_RESULT, "Unknown activity result: " + resultCode);
-      return;
+    @ReactMethod
+    public void pickDirectory(Promise promise) {
+        Activity currentActivity = getCurrentActivity();
+        if (currentActivity == null) {
+            promise.reject(E_ACTIVITY_DOES_NOT_EXIST, "Current activity does not exist");
+            return;
+        }
+        this.promise = promise;
+        try {
+            Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);
+            currentActivity.startActivityForResult(intent, PICK_DIR_REQUEST_CODE, null);
+        } catch (Exception e) {
+            sendError(E_FAILED_TO_SHOW_PICKER, "Failed to create directory picker", e);
+        }
     }
-    Uri uri = null;
-    ClipData clipData = null;
 
-    if (data != null) {
-      uri = data.getData();
-      clipData = data.getClipData();
+    @Override
+    public void releaseSecureAccess(ReadableArray uris, Promise promise) {
+        promise.reject("RNDocumentPicker:releaseSecureAccess", "releaseSecureAccess is not supported on Android");
     }
 
-    try {
-      List<Uri> uris = new ArrayList<>();
-      // condition order seems to matter: https://github.com/rnmods/react-native-document-picker/issues/317#issuecomment-645222635
-      if (clipData != null && clipData.getItemCount() > 0) {
-        final int length = clipData.getItemCount();
-        for (int i = 0; i < length; ++i) {
-          ClipData.Item item = clipData.getItemAt(i);
-          uris.add(item.getUri());
+    private void onPickDirectoryResult(int resultCode, Intent data) {
+        if (resultCode != Activity.RESULT_OK) {
+            sendError(E_UNKNOWN_ACTIVITY_RESULT, "Unknown activity result: " + resultCode);
+            return;
         }
-      } else if (uri != null) {
-        uris.add(uri);
-      } else {
-        sendError(E_INVALID_DATA_RETURNED, "Invalid data returned by intent");
-        return;
-      }
-
-      new ProcessDataTask(getReactApplicationContext(), uris, copyTo, promise).execute();
-    } catch (Exception e) {
-      sendError(E_UNEXPECTED_EXCEPTION, e.getLocalizedMessage(), e);
-    }
-  }
-
-  private static class ProcessDataTask extends GuardedResultAsyncTask<ReadableArray> {
-    private final WeakReference<Context> weakContext;
-    private final List<Uri> uris;
-    private final String copyTo;
-    private final Promise promise;
-
-    protected ProcessDataTask(ReactContext reactContext, List<Uri> uris, String copyTo, Promise promise) {
-      super(reactContext.getExceptionHandler());
-      this.weakContext = new WeakReference<>(reactContext.getApplicationContext());
-      this.uris = uris;
-      this.copyTo = copyTo;
-      this.promise = promise;
+        if (data == null || data.getData() == null) {
+            sendError(E_INVALID_DATA_RETURNED, "Invalid data returned by intent");
+            return;
+        }
+        Uri uri = data.getData();
+        WritableMap map = Arguments.createMap();
+        map.putString(FIELD_URI, uri.toString());
+        promise.resolve(map);
     }
 
-    @Override
-    protected ReadableArray doInBackgroundGuarded() {
-      WritableArray results = Arguments.createArray();
-      for (Uri uri : uris) {
-        results.pushMap(getMetadata(uri));
-      }
-      return results;
-    }
+    public void onShowActivityResult(int resultCode, Intent data, Promise promise) {
+        if (resultCode != Activity.RESULT_OK) {
+            sendError(E_UNKNOWN_ACTIVITY_RESULT, "Unknown activity result: " + resultCode);
+            return;
+        }
+        if (data == null) {
+            sendError(E_INVALID_DATA_RETURNED, "Invalid data returned by intent: null");
+            return;
+        }
 
-    @Override
-    protected void onPostExecuteGuarded(ReadableArray readableArray) {
-      promise.resolve(readableArray);
+        try {
+            WritableArray results = Arguments.createArray();
+            List<Uri> uris = new ArrayList<>();
+
+            if (data.getClipData() != null) {
+                for (int i = 0; i < data.getClipData().getItemCount(); i++) {
+                    uris.add(data.getClipData().getItemAt(i).getUri());
+                }
+            } else if (data.getData() != null) {
+                uris.add(data.getData());
+            } else {
+                sendError(E_INVALID_DATA_RETURNED, "Invalid data returned by intent");
+                return;
+            }
+
+            for (Uri uri : uris) {
+                results.pushMap(getMetadata(uri));
+            }
+            promise.resolve(results);
+        } catch (Exception e) {
+            sendError(E_UNEXPECTED_EXCEPTION, e.getLocalizedMessage(), e);
+        }
     }
 
     private WritableMap getMetadata(Uri uri) {
-      Context context = weakContext.get();
-      if (context == null) {
-        return Arguments.createMap();
-      }
-      ContentResolver contentResolver = context.getContentResolver();
-      WritableMap map = Arguments.createMap();
-      map.putString(FIELD_URI, uri.toString());
-      map.putString(FIELD_TYPE, contentResolver.getType(uri));
-      try (Cursor cursor = contentResolver.query(uri, null, null, null, null, null)) {
-        if (cursor != null && cursor.moveToFirst()) {
-          int displayNameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
-          if (!cursor.isNull(displayNameIndex)) {
-            String fileName = cursor.getString(displayNameIndex);
-            map.putString(FIELD_NAME, fileName);
-          } else {
-            map.putNull(FIELD_NAME);
-          }
-          int mimeIndex = cursor.getColumnIndex(DocumentsContract.Document.COLUMN_MIME_TYPE);
-          if (!cursor.isNull(mimeIndex)) {
-            map.putString(FIELD_TYPE, cursor.getString(mimeIndex));
-          }
-          int sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE);
-          if (cursor.isNull(sizeIndex)) {
-            map.putNull(FIELD_SIZE);
-          } else {
-            map.putDouble(FIELD_SIZE, cursor.getLong(sizeIndex));
-          }
+        WritableMap map = Arguments.createMap();
+        map.putString(FIELD_URI, uri.toString());
+
+        ContentResolver contentResolver = getReactApplicationContext().getContentResolver();
+        map.putString(FIELD_TYPE, contentResolver.getType(uri));
+
+        try (Cursor cursor = contentResolver.query(uri, null, null, null, null, null)) {
+            if (cursor != null && cursor.moveToFirst()) {
+                int displayNameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
+                if (!cursor.isNull(displayNameIndex)) {
+                    map.putString(FIELD_NAME, cursor.getString(displayNameIndex));
+                }
+
+                int sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE);
+                if (!cursor.isNull(sizeIndex)) {
+                    map.putDouble(FIELD_SIZE, cursor.getLong(sizeIndex));
+                }
+            }
         }
-      }
 
-      prepareFileUri(context, map, uri);
-      return map;
+        prepareFileUri(map, uri);
+        return map;
     }
 
-    private void prepareFileUri(Context context, WritableMap map, Uri uri) {
-      if (copyTo == null) {
-        map.putNull(FIELD_FILE_COPY_URI);
-      } else {
-        copyFileToLocalStorage(context, map, uri);
-      }
-    }
+    private void prepareFileUri(WritableMap map, Uri uri) {
+        if (copyTo == null) {
+            map.putNull(FIELD_FILE_COPY_URI);
+            return;
+        }
 
-    private void copyFileToLocalStorage(Context context, WritableMap map, Uri uri) {
-      File dir = context.getCacheDir();
-      if (copyTo.equals("documentDirectory")) {
-        dir = context.getFilesDir();
-      }
-      // we don't want to rename the file so we put it into a unique location
-      dir = new File(dir, UUID.randomUUID().toString());
-      try {
-        boolean didCreateDir = dir.mkdir();
-        if (!didCreateDir) {
-          throw new IOException("failed to create directory at " + dir.getAbsolutePath());
+        File dir = getReactApplicationContext().getCacheDir();
+        if ("documentDirectory".equals(copyTo)) {
+            dir = getReactApplicationContext().getFilesDir();
         }
-        String fileName = map.getString(FIELD_NAME);
-        if (fileName == null) {
-          fileName = String.valueOf(System.currentTimeMillis());
+
+        dir = new File(dir, UUID.randomUUID().toString());
+        try {
+            if (!dir.mkdir()) {
+                throw new IOException("Failed to create directory at " + dir.getAbsolutePath());
+            }
+
+            String fileName = map.getString(FIELD_NAME);
+            if (fileName == null) {
+                fileName = String.valueOf(System.currentTimeMillis());
+            }
+
+            File destFile = new File(dir, fileName);
+            Uri copyPath = copyFile(getReactApplicationContext(), uri, destFile);
+            map.putString(FIELD_FILE_COPY_URI, copyPath.toString());
+        } catch (Exception e) {
+            e.printStackTrace();
+            map.putNull(FIELD_FILE_COPY_URI);
+            map.putString(FIELD_COPY_ERROR, e.getLocalizedMessage());
         }
-        File destFile = safeGetDestination(new File(dir, fileName), dir.getCanonicalPath());
-        Uri copyPath = copyFile(context, uri, destFile);
-        map.putString(FIELD_FILE_COPY_URI, copyPath.toString());
-      } catch (Exception e) {
-        e.printStackTrace();
-        map.putNull(FIELD_FILE_COPY_URI);
-        map.putString(FIELD_COPY_ERROR, e.getLocalizedMessage());
-      }
     }
 
-    public File safeGetDestination(File destFile, String expectedDir) throws IllegalArgumentException, IOException {
-      String canonicalPath = destFile.getCanonicalPath();
-      if (!canonicalPath.startsWith(expectedDir)) {
-        throw new IllegalArgumentException("The copied file is attempting to write outside of the target directory.");
-      }
-      return destFile;
-    }
+    private static Uri copyFile(Context context, Uri uri, File destFile) throws IOException {
+        try (InputStream inputStream = context.getContentResolver().openInputStream(uri);
+             FileOutputStream outputStream = new FileOutputStream(destFile)) {
+
+            if (inputStream == null) {
+                throw new IOException("Failed to open input stream for " + uri);
+            }
 
-    public static Uri copyFile(Context context, Uri uri, File destFile) throws IOException {
-      try(InputStream inputStream = context.getContentResolver().openInputStream(uri);
-          FileOutputStream outputStream = new FileOutputStream(destFile)) {
-        byte[] buf = new byte[8192];
-        int len;
-        while ((len = inputStream.read(buf)) > 0) {
-          outputStream.write(buf, 0, len);
+            byte[] buf = new byte[8192];
+            int len;
+            while ((len = inputStream.read(buf)) > 0) {
+                outputStream.write(buf, 0, len);
+            }
         }
         return Uri.fromFile(destFile);
-      }
     }
-  }
 
-  private void sendError(String code, String message) {
-    sendError(code, message, null);
-  }
+    private void sendError(String code, String message) {
+        sendError(code, message, null);
+    }
 
-  private void sendError(String code, String message, Exception e) {
-    Promise temp = this.promise;
-    if (temp != null) {
-      this.promise = null;
-      temp.reject(code, message, e);
+    private void sendError(String code, String message, Exception e) {
+        Promise temp = this.promise;
+        if (temp != null) {
+            this.promise = null;
+            temp.reject(code, message, e);
+        }
     }
-  }
 }
\ No newline at end of file
